Q0 How do you parenthesise
\x -> x <*> \y -> y / 2 ?
Mark these either as True or False:
    \x -> (x <*> (\y -> (y / 2)))
    ((\x -> x) <*> (\y -> y)) / 2
    (\x -> x) <*> ((\y -> y ) / 2)

Vastaus: True, False, False

Q1 You have just defined data Participant = Student String Int | Teacher String
and list participants :: [Participant]. Which structure would be most suitable for
a) Checking that there are atleast 5 participants (in the list), and
b) Checking that if a participant a teacher
Mark these either as True or False:
    a) if, b) if
    a) if, b) case
    a) case, b) if
    a) case, b) case

Q1 Vastaus: toinen kohta True, a) if, b) case. Tai viimeinen,
a) case ja b) case? Joka tapauksessa b-kohdassa pitää testata sekä
vaihtoehto että osallistuja on opettaja että se, että se on oppilas.
Se onnistuu parhaiten case-rakenteella.

Q2 Which of these are the same as [1,2,3]?
Mark these either as True or False:
    1:2:3
    1:[2:3]
    1:2:[3]
    1:2:3:[]

Q2 Vastaus: False, False, True, True.

Q3
How do you create a value of type ListOf?
data ListOf a = Null | Cons a (ListOf a)
Mark these either as True or False:
    Null
    ListOf [1,2,3]
    Cons 4 (ListOf a)
    Cons 5 (Cons 6 (Null))
    let l = Cons 1 l in l

Q3 Vastaus:

Q4
What does
case Just (Left 1) of
    Nothing        -> "A"
    Just (Right 1) -> "B"
    Just x         -> "C"
    Just (Left 1)  -> "D"
evaluate to?
Mark these either as True or False:
    "A"
    "B"
    "C"
    "D"

Q4 Vastaus: False, False, False, True

Q5
What constructors are defined here?
data PyType = PyBool Bool
            | PyInt Int
            | PyDouble Double
            | PyFun ([PyType] -> IO PyType)

Mark these either as True or False:
    PyType
    PyBool
    Bool
    PyFun

Q5 Vastaus:

Q6
What is the type of PyFun given:
data PyType = PyBool Bool
            | PyInt Int
            | PyDouble Double
            | PyFun ([PyType] -> IO PyType)

Mark these either as True or False:
    PyFun :: [PyType] -> IO PyType
    PyFun :: ([PyType] -> IO PyType) -> PyType
    PyFun :: [PyType] -> IO PyType -> PyType
    Constructors don't have a type

Q6 Vastaus:

Q7
data PyType = PyBool Bool
            | PyInt Int
            | PyDouble Double
            | PyFun ([PyType] -> IO PyType)

What is the type of PyFun boo if PyFun boo is well typed?
Mark these either as True or False:
    PyFun boo :: [PyType] -> IO PyType
    PyFun boo :: IO PyType
    PyFun boo :: PyType

Q7 Vastaus:

Q8
How would you define LoginResult in
checkUserLogin :: User -> SessionCookie -> LoginResult
(e.g for a function that handles logging in to this web page)
Mark these either as True or False:
    type LoginResult = Bool
    type LoginResult = Maybe UserInfo
    type LoginResult = (UserInfo,Bool)
    type LoginResult = String

Q8 Vastaus:
